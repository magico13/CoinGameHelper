@page "/"

@using CoinGameHelper;

<PageTitle>Index</PageTitle>

<h1>Coin Game Helper</h1>

A helper for the HeartGold/SoulSilver Arcade Coin Game.

@if (Simulation.WereRowsAndColumnsFinalized is false)
{
    @*Table to define each of the 5 rows*@
    <Table Style="max-width: 500px">
        <TableHeader>
            <TableHeaderCell Style="width: 50px">Row</TableHeaderCell>
            <TableHeaderCell>Points</TableHeaderCell>
            <TableHeaderCell>Bombs</TableHeaderCell>
        </TableHeader>
        @for (int i = 0; i < 5; i++)
        {
            var row = i;
            <TableRow Style=@("background-color:"+colorNames[row])>
                <TableRowCell TextAlignment="TextAlignment.Center">
                    @(row + 1)
                </TableRowCell>
                <TableRowCell>
                    <NumericEdit TValue="int" Max="15" Min="0" @bind-Value="Simulation.Board.Rows[row].Points" />
                </TableRowCell>
                <TableRowCell>
                    <NumericEdit TValue="int" Max="5" Min="0" @bind-Value="Simulation.Board.Rows[row].Bombs" />
                </TableRowCell>
            </TableRow>
        }
    </Table>

    @*Table for the 5 columns*@
    <Table Style="max-width: 500px">
        <TableHeader>
            <TableHeaderCell Style="width: 50px">Column</TableHeaderCell>
            <TableHeaderCell>Points</TableHeaderCell>
            <TableHeaderCell>Bombs</TableHeaderCell>
        </TableHeader>
        @for (int j = 0; j < 5; j++)
        {
            var col = j;
            <TableRow Style=@("background-color:"+colorNames[col])>
                <TableRowCell TextAlignment="TextAlignment.Center">
                    @(col + 1)
                </TableRowCell>
                <TableRowCell>
                    <NumericEdit TValue="int" Max="15" Min="0" @bind-Value="Simulation.Board.Columns[col].Points" />
                </TableRowCell>
                <TableRowCell>
                    <NumericEdit TValue="int" Max="5" Min="0" @bind-Value="Simulation.Board.Columns[col].Bombs" />
                </TableRowCell>
            </TableRow>
        }
    </Table>

    <Button Color="Color.Primary" Clicked="Start">Start</Button>
}
else
{
    @*The board is (at least for now) a table of 5x5 small text edits. When a value is edited, we update the board and run a simulate*@
    <Table Bordered Narrow TextAlignment="TextAlignment.Center" Style="width: 250px">
         @for (int i = 0; i < Simulation.Board.Rows.Count; i++)
        {
            var row = i;
            <TableRow>
                @for (int j = 0; j < Simulation.Board.Columns.Count; j++)
                {
                    var col = j;
                    <TableRowCell>
                        <Div>
                            @{
                                var value = Simulation.Board.GetValue(row, col);
                                var (iconName, colorName) = GetIconNameAndColorForValue(value);
                                if (iconName is not null)
                                {
                                    colorName ??= "black";
                                    <Icon Name=iconName Clicked="@(async e => await PopModal(row, col))" Style=@("color:"+colorName) />
                                }
                                else
                                {
                                    @(((int)value).ToString())
                                    // <Button Color="Color.Default" Clicked="@(async e=> await PopModal(row, col))">
                                    //     @(((int)value).ToString())
                                    // </Button>
                                }
                            }
                        </Div>
                    </TableRowCell>
                }
                <TableRowCell Style="@("background-color: "+colorNames[row])">
                    @{
                        var rowDiff = Simulation.Board.Rows[row].Points + Simulation.Board.Rows[row].Bombs - Simulation.Board.GetRowScore(row, bombVal: 1);
                        @(rowDiff.ToString())
                    }
                </TableRowCell>
            </TableRow>
        }
        <TableRow>
            @for (int j = 0; j < Simulation.Board.Columns.Count; j++)
            {
                var col = j;
                <TableRowCell Style="@("background-color: "+colorNames[col])">
                    @{
                        var colDiff = Simulation.Board.Columns[col].Points + Simulation.Board.Columns[col].Bombs - Simulation.Board.GetColumnScore(col, bombVal: 1);
                        @(colDiff.ToString())
                    }
                </TableRowCell>
            }
        </TableRow>
    </Table>

    <Paragraph>
        Possible boards: @(totalBoards.ToString("N0"))
    </Paragraph>

    <Paragraph>
        Best guess is @(safestRow + 1), @(safestColumn + 1) with a score of @(safestScore.ToString("P2")).
    </Paragraph>

    <Button Color="Color.Primary" Clicked="Reset">Reset</Button>
}


<Modal @ref="selectionModal">
    <ModalContent>
        <ModalHeader>
            <ModalTitle>Select Value</ModalTitle>
            <CloseButton />
        </ModalHeader>
        <ModalBody>
            <Button Clicked="@(async e => await SetValue(1))">1</Button>
            <Button Clicked="@(async e => await SetValue(2))">2</Button>
            <Button Clicked="@(async e => await SetValue(3))">3</Button>
        </ModalBody>
    </ModalContent>
</Modal>

@code {
    Modal selectionModal { get; set; } = new();
    Simulation Simulation { get; set; } = new();

    private int safestRow = 0;
    private int safestColumn = 0;
    private double safestScore = 0;
    private int totalBoards = 0;

    private string[] colorNames = new string[] { "red", "green", "yellow", "lightblue", "mediumpurple" };
    private int selectedRow = 0;
    private int selectedColumn = 0;

    protected override void OnInitialized()
    {
        Reset();

        SetupKnownState();
    }

    private void SetupKnownState()
    {
        Simulation.Board.Rows = new()
        {
            new() { Points = 5, Bombs = 1 },
            new() { Points = 6, Bombs = 0 },
            new() { Points = 6, Bombs = 1 },
            new() { Points = 6, Bombs = 1 },
            new() { Points = 2, Bombs = 3 }
        };
        Simulation.Board.Columns = new()
        {
            new() { Points = 6, Bombs = 2 },
            new() { Points = 3, Bombs = 2 },
            new() { Points = 5, Bombs = 0 },
            new() { Points = 6, Bombs = 1 },
            new() { Points = 5, Bombs = 1 }
        };

        Start();
    }

    private void Reset()
    {
        Simulation.StartNew();
    }

    private void Start()
    {
        Simulation.FinalizeRowsAndColumns();
        PopulateSafestChoice();
    }

    private (IconName? icon, string? color) GetIconNameAndColorForValue(SpaceType type)
        => type switch
        {
            SpaceType.Unknown => (IconName.Expand, null),
            SpaceType.Safe => (IconName.Check, "lightblue"),
            SpaceType.Bomb => (IconName.ExclamationTriangle, "orangered"),
            SpaceType.BombOrOne => (IconName.ExclamationCircle, null),
            _ => (null, null)
        };

    private async Task PopModal(int row, int col)
    {
        selectedRow = row;
        selectedColumn = col;
        await selectionModal.Show();
    }


    private async Task SetValue(int value)
    {
        await selectionModal.Hide();
        Simulation.Board.SetValue(value, selectedRow, selectedColumn);
        Simulation.Simulate();
        PopulateSafestChoice();
    }

    private void PopulateSafestChoice()
    {
        var (row, col, score) = Simulation.FindSafestUnknownSpace();
        safestRow = row;
        safestColumn = col;
        safestScore = score;
        totalBoards = Simulation.AllPossibleBoards.Count;
    }
}
